// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Profile Model
model Profile {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  fullName  String?  @map("full_name")
  avatarUrl String?  @map("avatar_url")
  bio       String?
  website   String?
  
  // Role-based access
  role      Role     @default(AUTHOR)
  
  // Account status
  isActive     Boolean @default(true) @map("is_active")
  isVerified   Boolean @default(false) @map("is_verified")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  articles     Article[]
  comments     Comment[]
  articleLikes ArticleLike[]
  bookmarks    Bookmark[]
  followers    Follow[] @relation("UserFollowers")
  following    Follow[] @relation("UserFollowing")
  
  @@map("profiles")
}

// Article Model
model Article {
  id          String        @id @default(cuid())
  title       String
  content     String        @db.Text
  excerpt     String?
  slug        String        @unique
  
  // Article status
  status      ArticleStatus @default(DRAFT)
  featured    Boolean       @default(false)
  
  // SEO
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")
  featuredImage   String? @map("featured_image")
  
  // Category and tags
  categoryId   String?
  category     Category? @relation(fields: [categoryId], references: [id])
  tags         String[]  // Simple string array instead of relation
  
  // Author
  authorId String
  author   Profile @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Metrics
  viewCount    Int @default(0) @map("view_count")
  likeCount    Int @default(0) @map("like_count")
  commentCount Int @default(0) @map("comment_count")
  readingTime  Int @default(1) @map("reading_time")
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at")
  
  // Relations
  comments  Comment[]
  likes     ArticleLike[]
  bookmarks Bookmark[]
  
  @@map("articles")
  @@index([status])
  @@index([authorId])
  @@index([categoryId])
  @@index([slug])
}

// Category Model (simplified)
model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  color       String? // Hex color
  
  // Metadata
  isActive    Boolean @default(true) @map("is_active")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  articles Article[]
  
  @@map("categories")
  @@index([slug])
}

// Comment Model
model Comment {
  id      String @id @default(cuid())
  content String @db.Text
  status  CommentStatus @default(PENDING)
  
  // Author (can be guest or registered)
  authorId    String?
  author      Profile? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorName  String   @map("author_name")
  authorEmail String   @map("author_email")
  
  // Article
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // Threading
  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("comments")
  @@index([articleId])
  @@index([status])
}

// Article Likes
model ArticleLike {
  id        String @id @default(cuid())
  articleId String @map("article_id")
  userId    String @map("user_id")
  
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([articleId, userId])
  @@map("article_likes")
}

// Bookmarks
model Bookmark {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  articleId String @map("article_id")
  
  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([userId, articleId])
  @@map("bookmarks")
}

// Follow System
model Follow {
  id          String @id @default(cuid())
  followerId  String @map("follower_id")
  followingId String @map("following_id")
  
  follower  Profile @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([followerId, followingId])
  @@map("follows")
}

// Basic Analytics (simplified)
model PageView {
  id        String @id @default(cuid())
  articleId String?
  userId    String?
  ipAddress String? @map("ip_address")
  userAgent String? @map("user_agent")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("page_views")
  @@index([articleId])
  @@index([createdAt])
}

// Enums
enum Role {
  ADMIN
  EDITOR
  AUTHOR
  SUBSCRIBER
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}
